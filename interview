# redis
-- 1. redis 中set、mset、setnx 区别。
set key value [expire、 ex|px、 nx|xx]（可选）
设置 key value 超时世界 ex 秒 px 毫秒 nx 不存在则生效 xx 存在则生效
失败返回nil
mset 相当于 多个set key value
setnx key value 当key不存在时生效 返回1 存在返回nil 0
-- 2. Redis 持久化机制
Redis是一个支持持久化的内存数据库，通过持久化机制把内存中的数据同步到硬盘文件来保证数据持久化。当Redis重启后通过把硬盘文件重新加载到内存，就能达到恢复数据的目的。
实现：单独创建fork()一个子进程，将当前父进程的数据库数据复制到子进程的内存中，然后由子进程写入到临时文件中，持久化的过程结束了，再用这个临时文件替换上次的快照文件，然后子进程退出，内存释放。

RDB是Redis默认的持久化方式。按照一定的时间周期策略把内存的数据以快照的形式保存到硬盘的二进制文件。即Snapshot快照存储，对应产生的数据文件为dump.rdb，通过配置文件中的save参数来定义快照的周期。（ 快照可以是其所表示的数据的一个副本，也可以是数据的一个复制品。）
AOF：Redis会将每一个收到的写命令都通过Write函数追加到文件最后，类似于MySQL的binlog。当Redis重启是会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。
当两种方式同时开启时，数据恢复Redis会优先选择AOF恢复。

-- 3. 单线程的redis为什么这么快
 1.纯内存操作
 2.单线程操作，避免了频繁的上下文切换
 3.采用了非阻塞I/O多路复用机制
 
 -- 4. redis的过期策略以及内存淘汰机制
 redis采用的是定期删除+惰性删除策略
 maxmemory-policy volatile-lru
 volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰
allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
no-enviction（驱逐）：禁止驱逐数据，新写入操作会报错
ps：如果没有设置 expire 的key, 不满足先决条件(prerequisites); 那么 volatile-lru, volatile-random 和 volatile-ttl 策略的行为, 和 noeviction(不删除) 基本上一致
即未存在有超时的key  删除策略非allkey 则redis 会写入报错

-- 5.redis常见性能问题和解决方案
(1) Master 最好不要做任何持久化工作，如 RDB 内存快照和 AOF 日志文件
(2) 如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一次
(3) 为了主从复制的速度和连接的稳定性， Master 和 Slave 最好在同一个局域网内
(4) 尽量避免在压力很大的主库上增加从库
(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即： Master <- Slave1 <- Slave2 <-
Slave3…
-- 6.Redis事务
Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的
Redis会将一个事务中的所有命令序列化，然后按顺序执行。
1.redis 不支持回滚“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”， 所以 Redis 的内部可以保持简单且快速。
2.如果在一个事务中的命令出现错误，那么所有的命令都不会执行；
3.如果在一个事务中出现运行错误，那么正确的命令会被执行。
注：redis的discard只是结束本次事务,正确命令造成的影响仍然存在.

1）MULTI命令用于开启一个事务，它总是返回OK。 MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，所有队列中的命令才会被执行。
2）EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。
3）通过调用DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退出。
4）WATCH 命令可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个或多个键

# Java
HashMap的数据结构是什么

数组+链表 1.7
数组+链表或红黑树 1.8

HashMap 扩容因子默认是多少。初始容量未100的HashMap,下次扩容值是多少。
默认：0.75 
100，大于100最小2次幂减一。大于100的最小2次幂是：128， 容量下次扩容 127。

若此时存入20个对象
HashMap的结构是什么样的？链表还是红黑树？
超过8个会转换为红黑树。少于6个会转换成链表

若达到扩容值 则会扩容成多少？
2倍扩容：127*2 254


HashMap容量设置有什么要求.
最好是2的n次幂

Hashmap的结构，1.7和1.8有哪些区别
1.JDK1.7用的是头插法，而JDK1.8及之后使用的都是尾插法
因为JDK1.7是用单链表进行的纵向延伸，当采用头插法时会容易出现逆序且环形链表死循环问题。
但是在JDK1.8之后是因为加入了红黑树使用尾插法，能够避免出现逆序且链表死循环的问题
2.扩容后数据存储位置的计算方式也不一样
  1. 在JDK1.7的时候是直接用hash值和需要扩容的二进制数进行&（这里就是为什么扩容的时候为啥一定必须是2的多少次幂的原因所在，
  因为如果只有2的n次幂的情况时最后一位二进制数才一定是1，这样能最大程度减少hash碰撞）（hash值 & length-1）

  2. 而在JDK1.8的时候直接用了JDK1.7的时候计算的规律，也就是扩容前的原始位置+扩容的大小值=JDK1.8的计算方式，
  而不再是JDK1.7的那种异或的方法。但是这种方式就相当于只需要判断Hash值的新增参与运算的位是0还是1就直接迅速计算出了扩容后的储存方式
  
  
  什么是ThreadLocal？
  ThreadLocal提供了线程的局部变量，
  每个线程都可以通过set()和get()来对这个局部变量进行操作，但不会和其他线程的局部变量进行冲突，实现了线程的数据隔离
   
  有使用场景：连接池、避免参数传递，如：session管理
  扩展：InheritableThreadLocal
  可跨线程使用
  
  内存模型相关
  
   JVM 内存结构
  
  JVM 内存模型共分为5个区：堆(Heap)、方法区(Method Area)、
  程序计数器(Program Counter Register)、虚拟机栈(VM Stack)、
  本地方法栈(Native Method Stack)
   
  1.Java堆（Heap）,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。
  此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。
  2.方法区（Method Area）,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，
  它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
  3.程序计数器（Program Counter Register）,程序计数器（Program Counter Register）是一块较小的内存空间，
  它的作用可以看做是当前线程所执行的字节码的行号指示器。
  4.JVM栈（JVM Stacks）,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。
  虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、
  操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。
  5.本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，
  其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务

对象分配规则
对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。
大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。
这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。
长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，
如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，
知道达到阀值对象进入老年区。
动态判断对象的年龄。如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，
年龄大于或等于该年龄的对象可以直接进入老年代。
空间分配担保。每次进行Minor GC时，JVM会计算Survivor区移至老年区的对象的平均大小，
如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，
如果true则只进行Monitor GC,如果false则进行Full GC。

默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ，可以通过参数 –XX:NewRatio 配置。
默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定)
Survivor区中的对象被复制次数为15(对应虚拟机参数 -XX:+MaxTenuringThreshold)

JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代

1.Java堆 = 老年代 + 新生代
2.新生代 = Eden + S0 + S1
3.当 Eden 区的空间满了， Java虚拟机会触发一次 Minor GC，以收集新生代的垃圾，存活下来的对象，则会转移到 Survivor区。
4.大对象（需要大量连续内存空间的Java对象，如那种很长的字符串）直接进入老年态；
5.如果对象在Eden出生，并经过第一次Minor GC后仍然存活，并且被Survivor容纳的话，年龄设为1，
每过一次Minor GC，年龄+1，若年龄超过一定限制（15），则被晋升到老年态。即长期存活的对象进入老年态。
6.老年代满了而无法容纳更多的对象，Minor GC 之后通常就会进行Full GC，Full GC  清理整个内存堆 – 包括年轻代和年老代。
Major GC 发生在老年代的GC，清理老年区，经常会伴随至少一次Minor GC，比Minor GC慢10倍以上。


你知道哪几种垃圾收集器
1.Serial收集器： 单线程的收集器，收集垃圾时，必须stop the world，使用复制算法。
2.ParNew收集器：  Serial收集器的多线程版本，也需要stop the world，复制算法。
3.Parallel Scavenge收集器： 新生代收集器，复制算法的收集器，并发的多线程收集器，目标是达到一个可控的吞吐量。如果虚拟机总共运行100分钟，其中垃圾花掉1分钟，吞吐量就是99%。
4.Serial Old收集器： 是Serial收集器的老年代版本，单线程收集器，使用标记整理算法。
5.Parallel Old收集器： 是Parallel Scavenge收集器的老年代版本，使用多线程，标记-整理算法。
6.CMS(Concurrent Mark Sweep) 收集器： 是一种以获得最短回收停顿时间为目标的收集器，标记清除算法，运作过程：初始标记，并发标记，重新标记，并发清除，收集结束会产生大量空间碎片。
7.G1收集器： 标记整理算法实现，运作流程主要包括以下：初始标记，并发标记，最终标记，筛选标记。不会产生空间碎片，可以精确地控制停顿。

CMS收集器和G1收集器的区别：
CMS收集器是老年代的收集器，可以配合新生代的Serial和ParNew收集器一起使用；
G1收集器收集范围是老年代和新生代，不需要结合其他收集器使用；
CMS收集器以最小的停顿时间为目标的收集器；
G1收集器可预测垃圾回收的停顿时间
CMS收集器是使用“标记-清除”算法进行的垃圾回收，容易产生内存碎片
G1收集器使用的是“标记-整理”算法，进行了空间整合，降低了内存空间碎片。


类加载器

1.启动类加载器：Bootstrap ClassLoader，负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，
或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库扩展类加载器：
2.Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载DK\jre\lib\ext目录中，
或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器。
3.应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，
它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器
4.自定义加载器

说说你知道的几种主要的JVM参数

-Xmx3550m： 最大堆大小为3550m。
-Xms3550m： 设置初始堆大小为3550m。
-Xmn2g： 设置年轻代大小为2g。
-Xss128k： 每个线程的堆栈大小为128k。
-XX:MaxPermSize：  设置持久代大小为16m
-XX:NewRatio=4: 设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。
-XX:SurvivorRatio=4： 设置年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6
-XX:MaxTenuringThreshold=0： 设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。

-XX:+UseParallelGC： 选择垃圾收集器为并行收集器。
-XX:ParallelGCThreads=20： 配置并行收集器的线程数
-XX:+UseConcMarkSweepGC： 设置年老代为并发收集。
-XX:CMSFullGCsBeforeCompaction：由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩、整理。
-XX:+UseCMSCompactAtFullCollection： 打开对年老代的压缩。可能会影响性能，但是可以消除碎片

-XX:+PrintGC
-XX:+PrintGCDetails


泛型

Java中的泛型是什么 ? 使用泛型的好处是什么?
泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。

泛型通配符
无限制通配符。T A S
extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类
super 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类

可以把List<String>传递给一个接受List<Object>参数的方法吗
不可以，会导致编译错误

Array(数组)中可以用泛型吗
不支持

Mysql

char(10)以及varchar(10)的区别

char(10)表示存储定长的10个字符，不足10个就用空格补齐，占用更多的存储空间
varchar(10)表示存储10个变长的字符，存储多少个就是多少个，空格也按一个字符存储，
这一点是和char(10)的空格不同的，char(10)的空格表示占位不算一个字符

一张表，里面有ID自增主键，当insert了17条记录之后，
删除了第15,16,17条记录，再把Mysql重启，再insert一条记录，这条记录的ID是18还是15 ?
表类型是myIsam，是18 不会丢 ，会记录最大id
表类型是innodb，8.0 之前是15， 8.0之后依靠redo log 来恢复 是 18

explain
id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra
id：越大越先执行
type：ALL：全表扫描，index：全索引扫描，range：范围扫描，ref：一种索引访问，也称索引查找，eq_ref：使用这种索引查找，最多只返回一条符合条件的记录，const、system：该表至多有一个匹配行
     NULL：在执行阶段不需要访问表。

key 列显示使用了哪个索引
rows 预估值，为搜索而读取的行数，越小越好，


索引的几大原则
尽量减少like，但不是绝对不可用，”xxxx%” 是可以用到索引的
    （2）. 表的主键、外键必须有索引
    （3）. 谁的区分度更高（同值的最少），谁建索引，区分度的公式是count(distinct（字段）)/count(*)
    （4）. 单表数据太少，不适合建索引
    （5）. where，order by ,group by 等过滤时，后面的字段最好加上索引
    （6）. 如果既有单字段索引，又有这几个字段上的联合索引，一般可以删除联合索引；
    （7）. 联合索引的建立需要进行仔细分析；尽量考虑用单字段索引代替：
    （8）. 联合索引: mysql 从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index(a,b,c). 可以支持 a|a,b|a,b,c 3种组合进行查找，但不支持 b,c 进行查找.当最左侧字段是常量引用时，索引就十分有效。
    （9）. 前缀索引: 有时候需要索引很长的字符列，这会让索引变得大且慢。通常可以索引开始的部分字符，这样可以大大节约索引空间，从而提高索引效率。其缺点是不能用于ORDER BY和GROUP BY操作，也不能用于覆盖索引 Covering index（即当索引本身包含查询所需全部数据时，不再访问数据文件本身）。
   （10）. NULL会导致索引形同虚设










  
  
  
  
  




